<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask
      TaskName="AssetLocalization"
      TaskFactory="CodeTaskFactory"
      AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll" >
    <ParameterGroup>
      <SolutionFolder ParameterType="System.String" Required="true" />
      <DefaultLocale ParameterType="System.String" Required="true" />
      <EnableLocalization ParameterType="System.Boolean" Required="false" />
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Reference Include="System.Runtime.Serialization" />
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System"/>
      <Using Namespace="System.Collections.Generic"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Linq"/>
      <Using Namespace="System.Runtime.Serialization.Json"/>
      <Using Namespace="System.Text"/>
      <Using Namespace="System.Xml"/>
      <Using Namespace="System.Xml.Linq"/>
      <Using Namespace="System.Xml.XPath"/>
      <Using Namespace="Microsoft.Build.Framework"/>
      <Using Namespace="Microsoft.Build.Utilities"/>
      <Code Type="Class" Language="cs">
        <![CDATA[
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Runtime.Serialization.Json;
    using System.Text;
    using System.Xml;
    using System.Xml.Linq;
    using System.Xml.XPath;
    using Microsoft.Build.Framework;
    using Microsoft.Build.Utilities;
    
    /// <summary>
    /// 1. Extract localization template from $(SolutionFolder)/Assets/*.xml to $(SolutionFolder)/Resources/Assets/$(DefaultLocale).json.
    /// 2. If $(EnableLocalization) is true, extract translations from $(SolutionFolder)/Resources/Assets/*.json to $(SolutionFolder)/Assets/*.xml.
    /// </summary>
    public class AssetLocalization : Task
    {
        // Dynamics complains on Unicode files with BOM, hence overwrite default encoding.
        private static readonly Encoding _DefaultOutputEncoding = new UTF8Encoding(false);
        private static readonly XmlWriterSettings _DefaultXmlWriterSettings = new XmlWriterSettings
        {
            Encoding = _DefaultOutputEncoding,
            Indent = true,
            OmitXmlDeclaration = true, // Dynamics complains on XML files with declaration, hence remove.
        };

        public string SolutionFolder { get; set; }
        public string DefaultLocale { get; set; }
        public bool EnableLocalization { get; set; }

        public override bool Execute()
        {
            var SolutionAwareEntities = new string[] { "msdyn_productivityactioninputparameters", "msdyn_productivityactionoutputparameters", "msdyn_productivitymacroactiontemplates", "msdyn_productivitymacroconnectors", "msdyn_productivityparameterdefinitions","msdyn_panetoolconfigurations" };
            var jsonSerializerSettings = new DataContractJsonSerializerSettings { UseSimpleDictionaryFormat = true };
            var jsonSerializer = new DataContractJsonSerializer(typeof(Dictionary<string, string>), jsonSerializerSettings);

            var templateTexts = new Dictionary<string, string>(); // To keep English texts extracted from asset files.
            var defaultLanguageCode = System.Globalization.CultureInfo.GetCultureInfo(this.DefaultLocale).LCID;
            var assetResourceFolder = Path.Combine(SolutionFolder, "Resources", "Assets");
            var templateFile = Path.Combine(assetResourceFolder, String.Format("{0}.json", defaultLanguageCode));
            foreach(var solutionAwareEntity in SolutionAwareEntities)
            {
                var assetFolder = Path.Combine(SolutionFolder, solutionAwareEntity);

                // Asset files, e.g. Assets/msdyn_datainsightsandanalyticsfeatures.xml
                if (!Directory.Exists(assetFolder))
                {
                    this.LogMessage("Assets folder doesn't exist.");
                    continue;
                }
                var assetFiles = Directory.EnumerateFiles(assetFolder, "*.xml", SearchOption.AllDirectories);

                // Translation files, e.g. Resources/Assets/2052.json
                var translationFiles = Directory.Exists(assetResourceFolder)
                    ? Directory.EnumerateFiles(assetResourceFolder, "*.json").Where(_ => _ != templateFile)
                    : Enumerable.Empty<string>();

                // Load translations from Resources/Assets/*.json
                var translations = this.EnableLocalization
                    ? translationFiles.Select(file => {
                        this.LogMessage("Reading: {0}", file);
                        using (var stream = File.OpenRead(file))
                        {
                            return new
                            {
                                LanguageCode = Path.GetFileNameWithoutExtension(file),
                                Texts = (Dictionary<string, string>)jsonSerializer.ReadObject(stream)
                            };
                        }
                    // Make sure translation is sorted by LCID for easy debugging
                }).OrderBy(_ => _.LanguageCode).ToList() : null;

                // Process asset file one by one
                foreach (var assetFile in assetFiles)
                {
                    this.LogMessage("Processing: {0}", assetFile);

                    var assetXml = XElement.Load(assetFile);

                    // Take all nodes contains languagecode, e.g. <label description="Admin Report" languagecode="1033" />
                    // These nodes need to be translated.
                    var localizedNodes = assetXml.XPathSelectElements(String.Format("//*[@languagecode=\"{0}\"]", defaultLanguageCode));
                    var translated = false;

                    foreach (var localizedNode in localizedNodes)
                    {
                        var path = BuildNodePath(localizedNode);
                        var text = localizedNode.Attribute("description").Value;

                        // Keep English text to be saved
                        templateTexts.Add(path, text);

                        // Populate translations by removing all sibling nodes and add English and translations back.
                        if (this.EnableLocalization)
                        {
                            var parent = localizedNode.Parent;
                            parent.RemoveNodes();
                            parent.Add(localizedNode);
                            foreach (var translation in translations)
                            {
                                string translatedText;
                                if (translation.Texts.TryGetValue(path, out translatedText))
                                {
                                    var translatedNode = new XElement(localizedNode);
                                    translatedNode.Attribute("description").Value = translatedText;
                                    translatedNode.Attribute("languagecode").Value = translation.LanguageCode;
                                    parent.Add(translatedNode);

                                    translated = true;
                                }
                            }
                        }
                    }

                    // Save asset file if it's translated.
                    if (translated)
                    {
                        this.LogMessage("Saving: {0}", assetFile);

                        using (var xmlWriter = XmlWriter.Create(assetFile, _DefaultXmlWriterSettings))
                        {
                            assetXml.Save(xmlWriter);
                        }
                    }
                }

                // Save template resource file, e.g. Resources/Assets/1033.json
                if (templateTexts.Any())
                {
                    this.LogMessage("Saving: {0}", templateFile);

                    if (!Directory.Exists(assetResourceFolder))
                        Directory.CreateDirectory(assetResourceFolder);

                    using (var stream = File.Create(templateFile))
                    using (var writer = JsonReaderWriterFactory.CreateJsonWriter(stream, _DefaultOutputEncoding, ownsStream: true, indent: true))
                    {
                        jsonSerializer.WriteObject(writer, templateTexts);
                    }
                }
            }

            return true;
        }

        private static string BuildNodePath(XElement node)
        {
            // build node path in the following format
            // msdyn_datainsightsandanalyticsfeatures(msdyn_datainsightsandanalyticsfeatureid=010fd392-d498-4f46-8a47-350b8b3c5479).msdyn_name.label
            var text = new StringBuilder();
            BuildNodetPath(node, text);
            return text.ToString();
        }

        private static void BuildNodetPath(XElement node, StringBuilder text)
        {
            // Empty text for empty node
            if (node == null) return;

            // Build parent node path first
            BuildNodetPath((XElement)node.Parent, text);

            // Try to find a single attribute ends with "id"
            var idAttribute = node.Attributes().SingleOrDefault(_ => _.Name.LocalName.EndsWith("msdyn_uniquename", StringComparison.OrdinalIgnoreCase));

            // if id exists, append "(idName=idValue)"; otherwise ".NodeName".
            if (idAttribute == null)
                text.Append(node.Parent == null ? null : ".").Append(node.Name);
            else
                text.Append('(').Append(idAttribute.Name).Append('=').Append(idAttribute.Value).Append(')');
        }

        private void LogMessage(string message, params string[] args)
        {
            this.Log.LogMessage(String.Format(message, args));
        }
    }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target
    Name="ProcessAssetLocalization"
    AfterTargets="PrepareSolution"
    Condition=" '$(SkipLocalizationExtraction)' != 'true' ">

    <Message Text="Processing assets localization." Importance="High" />
    <Message Text="SolutionFolder value is: $(SolutionFolder)" Importance="High" />
    <Message Text="SolutionPackageDefaultLocale value is: $(SolutionPackageDefaultLocale)" Importance="High" />
    <Message Text="EnableLocalization value is: $(EnableLocalization)" Importance="High" />

    <AssetLocalization
      SolutionFolder="$(SolutionFolder)"
      DefaultLocale="$(SolutionPackageDefaultLocale)"
      EnableLocalization="$(EnableLocalization)"
      Condition=" '$(SolutionFolder)' != '' AND '$(SolutionPackageDefaultLocale)' != '' " />

    <Message Text="Required parameters are not specified. Assets localization process skipped." Importance="High" Condition=" '$(SolutionFolder)' == '' OR '$(SolutionPackageDefaultLocale)' == '' " />
    <Message Text="Assets localization process completed." Importance="High" Condition=" '$(SolutionFolder)' != '' AND '$(SolutionPackageDefaultLocale)' != '' " />

  </Target>

</Project>