# For full annotated example, please visit
#   https://onebranch.visualstudio.com/Pipeline/_wiki/wikis/Pipeline.wiki?wikiVersion=GBwikiMaster&pagePath=%2FWelcome%20to%20OneBranch%20Pipeline%2FCross%20Platform%20Cloud%20Delivery%20Pipeline%20(CDPx)%2FYAML%20Format%2FAnnotated%20Example

environment:
  host:
    os: 'windows'                                                       # used to verify at runtime that correct host pool is being used
    flavor: 'server'                                                    # not used and will be removed in future
    version: '2016'                                                     # not used and will be removed in future
  runtime:
    provider: 'appcontainer'                                            # Currently only appcontainer is supported
                                                                        # future will bring oscontainer and virtualmachine
    image: 'cdpxwin1809.azurecr.io/global/vse2017:latest-official-1542220-61d86c3d' # This is the image that your pipeline will run in.
                                                                        # For (appcontainer), Docker Hub public Microsoft repository images
                                                                        # can be used.
                                                                        # Example microsoft/dotnet:1.1.1-sdk-nanoserver.
                                                                        # Or the CDP team vended and custom images can be used.
                                                                        # These are cdpxwin.azurecr.io/user/<user-image-name> or
                                                                        # cdpxwin.azurecr.io/legacy/samples/wsmobile (for now).
    source_mode: 'map'                                                 # 'copy' or 'link'. There is a known bug for npm and ruby on some of
                                                                        # our images that linked folder in container may cause errors on
                                                                        # these languages, for that case, use 'copy' here and pipeline will
                                                                        # full copy source into container from host before each step and full
                                                                        # copy out back to host after each step. It may be very slow if you
                                                                        # have a giant repository.

workspace_options:                  # Metadata section
  enable_legacy_networking: true    # Default is false. If false, only the Restore stage enables network connectivity to the user build container. 
                                    # If true, all stages enable network connectivity to user build container.

signing_options:
  profile: 'external_distribution'
  codesign_validation_break_build: 'false'
  codesign_validation_glob_pattern: '*[!j][!s]'

version:
  name: 'Microsoft.Dynamics.Service.ProductivityTools'                                         # The uber name to attach to the artifacts generated by this pipeline.
                                                                        # Currently unused, but will be used in the future to refer to the
                                                                        # artifacts as a group by name.
  major: 9                                                              # The major version number.
  minor: 2
  tag: ''                                                          # The minor version number
  system: 'buildrevision'                                                       # Versioning scheme to use.
                                                                        # patch         - 1.0.MMddyyrrrr will be generated
                                                                        # buildrevision - 1.0.MMddyy.rrrr will be generated.

static_analysis_options:
  moderncop_options:
    files_to_scan:
    - exclude:
      - '**/*'
  fxcop_options:
    files_to_scan:
    - exclude:
      - '**/*'
  binskim_options:
    files_to_scan:
    - exclude:
      - '**/*'
  policheck_options:
    files_to_scan:
    - exclude:
      - '**/*'

restore:
  commands:

    - !!defaultcommand
      name: 'Restore packages'
      command: 'init.cmd'
      logs:
        - include:
            - '*.restore.log'
          exclude:

# The following is an optional user defined stage. If the version numbers generated by the pipeline are not compatible with your pre-existing
# model, then you can customize your version number any way you want by executing any scripts in this stage. This is a logical organization;
# you can do this even in build stage but we will be adding support to make VSTS show the custom version number in the future.
# Eventually, network access will be limited or cut-off in this stage.
versioning:
  commands:                                                             
    - !!defaultcommand                                                  
      name: 'Generate Version'                                          
      command: 'GenerateVersion.cmd'                                    # Script to generate version, use .sh for linux

# An optional user defined stage for performing any compilation, code generation etc.
# All files in the artifacts sections will be collected, saved off and signed.
# The signed files will be restored back to the original locations before the next stage is invoked.
# Eventually, network access will be limited or cut-off in this stage.
build:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
    - !!buildcommand                                                    # There are three types of commands, buildcommand, testcommand and
                                                                        # defaultcommand.
                                                                        # The only difference is that they collect different types of
                                                                        # artifacts.
                                                                        # buildcommand --- run a build script, collect artifacts, specify
                                                                        #                  files to sign and logs.
                                                                        # defaultcommand - run any script, collect logs only.
                                                                        # testcommand ---- run a test script, collect logs, test results and
                                                                        #                  code coverage files. and associate with the build.
      name: 'Build and package'                              # This is name for this step. The step name will be in logs and in the
                                                                        # future, will be associated with metrics, timelines, journal etc.
      command: 'build.cmd'                                    # A root relative path to the script to execute. Any console output
                                                                        # will be automatically pushed to VSTS logs. Any files explicitly
                                                                        # written to file can be collected via the logs list.
                                                                        # Note that the best way to code these scripts is such that they run
                                                                        # on a developer desktop. Invariably, if you can get it working on
                                                                        # your dev desktop, it should work in the CDP pipeline.
      logs:                                                           # This is a sequence of include and exclude glob patterns.
        - include:                                                   # Include patterns are evaluated fully first. All of them are relative
                                                                        # to the root of the source directory.
            - 'samples\csharp\build.log'
          exclude:                                                  # Exclude patterns are evaluated after all include patterns are
                                                                        # evaluated.
                                                                        # There may be spurious log files. Exclude them.
      artifacts:                                                      # A sequence of entries that describes what artifacts to collect and
                                                                        # upload.
        - from: 'drop\retail\AnyCPU\Blobs'       # We always preserve the root relative path for every matched file.
                                                                        # Sometimes that's OK and sometimes it's not. The from, to options
                                                                        # (both are optional and either of them can be used independently)
                                                                        # allow you to remap the folder from which artifacts are picked up to
                                                                        # a different location. Think of this as a effectively doing a
                                                                        # robocopy /S C:\X\Y to D;\F.
          to: 'Designer'
          include:
            - '**/*'
          signing_options:
            profile: 'external_distribution'
            sign_inline: false

# An optional user defined stage for performing packaging. This exists as a separate stage because some build processes do a
# compile-sign-package-sign model. For example, Windows based builds use this model. Linux builds typically follow a
# compile-hash-package-hash-sign hash model. For those folks, package may not need to exist as a separate step.
# Eventually, network access will be limited or cut-off in this stage.
package:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
                                                                        # We are not doing anything here. In fact, we could have omitted the
                                                                        # package stage entirely.
    - !!buildcommand

      name: 'ev2 Files'
      command: 'CopyEv2Files.cmd'
      artifacts:

#Copy Ev2 Files
        - from: 'src\EV2'
          to: 'EV2'
          include:
            - '**/*'

# An optional, interim user defined stage for performing publishing of the build. Examples include, dropping the files to a network share,
# pushing packages to a package repository, uploading binaries to blob store etc. 
# Eventually, network access in this stage will be restricted to dev-feeds only for
# non-official builds. We may remove this stage for official builds. Teams should use VSRM or Ev2 to release.
publish:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
                                                                        # We are not doing anything here. In fact, we could have omitted the
                                                                        # publish stage entirely.

# An optional user defined stage for running any type of always-needed uber cleanup. This exists as a separate stage because some build
# processes acquire shared resources during some stages. In case the build is cancelled or aborted or fails, this stage is provided so that
# these resources can be unacquired. In particular, the commands in this stage are always run.
user_cleanup:
  commands:                                                      # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
                                                                        # We are not doing anything here. In fact, we could have omitted the
                                                                        # user_cleanup stage entirely.

package_sources:
  nuget:
    config_files:                               # A list of glob patterns specifying the configuration files. Use this if you already have NuGet.Config files in your repository.
      - include:                                # Configuration files to include for automatic inference.
        - "build/config/nuget.config"
      - exclude:                                # Configuration files to exclude from automatic inference.